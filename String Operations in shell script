String operations in shell scripting involve manipulating strings—concatenating them, extracting substrings, searching for patterns, and more. Here are some common string operations you can perform in a shell script:

### 1. Concatenation

You can concatenate strings using the variable substitution `${}` or directly in commands:

```sh
# Using variable substitution
first_name="John"
last_name="Doe"
full_name="${first_name} ${last_name}"
echo "Full name: $full_name"

# Directly in commands
greeting="Hello, "
subject="World!"
message="${greeting}${subject}"
echo "$message"
```

### 2. Substring Extraction

To extract a substring from a variable, use `${variable:start_index:length}`:

```sh
sentence="The quick brown fox jumps over the lazy dog"
substring="${sentence:10:5}"  # Extracts "brown"
echo "$substring"
```

### 3. String Length

To get the length of a string, use `${#variable}`:

```sh
name="Alice"
length=${#name}
echo "Length of name: $length"
```

### 4. Searching and Replacing

#### Searching for Substrings

You can search for substrings within a string using pattern matching:

```sh
sentence="Hello, World!"
if [[ $sentence == *"Hello"* ]]; then
    echo "Found 'Hello' in the sentence."
fi
```

#### Replacing Substrings

To replace substrings within a string, use `${variable//pattern/replacement}`:

```sh
sentence="Hello, World!"
new_sentence="${sentence/World/Universe}"
echo "$new_sentence"  # Prints "Hello, Universe!"
```

### 5. Splitting Strings

You can split a string into an array using the `IFS` (Internal Field Separator) variable and `read` command:

```sh
csv_line="John,Doe,30"
IFS=',' read -ra fields <<< "$csv_line"
echo "First name: ${fields[0]}"
echo "Last name: ${fields[1]}"
echo "Age: ${fields[2]}"
```

### 6. Case Conversion

To convert the case of a string, use parameter expansion:

```sh
name="Alice"
uppercase_name="${name^^}"
lowercase_name="${name,,}"
echo "Uppercase name: $uppercase_name"
echo "Lowercase name: $lowercase_name"
```

### Example Shell Script with String Operations

Here's an example script (`string_operations.sh`) demonstrating various string operations:

```sh
#!/bin/bash

# Concatenation
first_name="John"
last_name="Doe"
full_name="${first_name} ${last_name}"
echo "Full name: $full_name"

# Substring extraction
sentence="The quick brown fox jumps over the lazy dog"
substring="${sentence:10:5}"  # Extracts "brown"
echo "Substring: $substring"

# String length
name="Alice"
length=${#name}
echo "Length of name: $length"

# Searching for substrings
if [[ $sentence == *"quick"* ]]; then
    echo "Found 'quick' in the sentence."
fi

# Replacing substrings
new_sentence="${sentence/quick/slow}"
echo "Replaced sentence: $new_sentence"

# Splitting strings
csv_line="John,Doe,30"
IFS=',' read -ra fields <<< "$csv_line"
echo "First name: ${fields[0]}"
echo "Last name: ${fields[1]}"
echo "Age: ${fields[2]}"

# Case conversion
name="Alice"
uppercase_name="${name^^}"
lowercase_name="${name,,}"
echo "Uppercase name: $uppercase_name"
echo "Lowercase name: $lowercase_name"
```

### Summary

String operations in shell scripting are essential for manipulating text data within scripts. They allow you to perform tasks such as concatenation, substring extraction, searching for patterns, replacing substrings, splitting strings into arrays, and converting case—all of which are useful for processing and manipulating textual data efficiently in shell scripts.
